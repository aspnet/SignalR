<Project>
  <ItemGroup>
    <NPMPackage Include="$(RepositoryRoot)clients/ts/signalr">
      <TarName>aspnet-signalr</TarName>
      <PackageId>@aspnet/signalr</PackageId>
    </NPMPackage>
    <NPMPackage Include="$(RepositoryRoot)clients/ts/signalr-protocol-msgpack">
      <TarName>aspnet-signalr-protocol-msgpack</TarName>
      <PackageId>@aspnet/signalr-protocol-msgpack</PackageId>
    </NPMPackage>
  </ItemGroup>

  <PropertyGroup Condition="'$(JAVA_HOME)' != ''">
    <!-- Determine the path we need to search to find javac.exe -->
    <JavacPath Condition="'$(OS)' == 'Windows_NT'">$(JAVA_HOME)\bin\javac.exe</JavacPath>
    <JavacPath Condition="'$(OS)' != 'Windows_NT'">$(JAVA_HOME)/bin/javac</JavacPath>

    <HasJdk Condition="Exists('$(JavacPath)')">true</HasJdk>

    <!-- Pass the Java Package Version down to Gradle -->
    <GradleOptions>-PpackageVersion="$(JavaPackageVersion)"</GradleOptions>
    <!-- Disable gradle daemon on CI since the CI seems to try to wait for the daemon to shut down, which it doesn't do :) -->
    <GradleOptions Condition="'$(CI)' == 'true'">$(GradleOptions) -Dorg.gradle.daemon=false</GradleOptions>
  </PropertyGroup>

  <Target Name="EnsureJdkInstalled" BeforeTargets="GetToolsets" Condition=" '$(SkipJavaClient)' != 'true' ">
    <Error Text="The JDK is required to build the SignalR repo on CI. Set the JAVA_HOME environment variable to the installation of the JDK"
            Condition="'$(HasJdk)' != 'true' AND '$(CI)' == 'true' " />
    
    <Warning Text="The JDK is required to build the SignalR Java client. No JDK could be found so this will be skipped. Set the JAVA_HOME environment variable to the installation of the JDK"
        Condition="'$(HasJdk)' != 'true' AND '$(CI)' != 'true' " />

    <Message Text="Using Java from $(JavacPath)" Importance="high" />
  </Target>

  <PropertyGroup>
    <RestoreDependsOn>$(RestoreDependsOn);RestoreNpm</RestoreDependsOn>
  </PropertyGroup>
  <Target Name="RestoreNpm" Condition="'$(PreflightRestore)' != 'True'">
    <Message Text="Restoring NPM modules" Importance="high" />
    <Exec Command="npm install --no-optional" WorkingDirectory="$(RepositoryRoot)clients/ts/common" />
    <Exec Command="npm install --no-optional" WorkingDirectory="$(RepositoryRoot)clients/ts/FunctionalTests" />
    <Exec Command="npm install --no-optional" WorkingDirectory="$(RepositoryRoot)clients/ts/signalr" />
    <Exec Command="npm install --no-optional" WorkingDirectory="$(RepositoryRoot)clients/ts/signalr-protocol-msgpack" />
  </Target>

  <PropertyGroup>
    <TestDependsOn>$(TestDependsOn);RunTSClientNodeTests;RunBrowserTests;RunJavaTests</TestDependsOn>
  </PropertyGroup>

  <Target Name="RunTSClientNodeTests">
    <Message Text="Running JavaScript client Node tests" Importance="high" />
    <Exec Command="npm test" WorkingDirectory="$(RepositoryRoot)clients/ts" IgnoreStandardErrorWarningFormat="true" />
  </Target>

  <Target Name="RunBrowserTests">
    <Message Text="Running JavaScript client Browser tests" Importance="high" />
    <Exec Command="npm run test:inner -- --no-color --configuration $(Configuration)" WorkingDirectory="$(RepositoryRoot)clients/ts/FunctionalTests" IgnoreStandardErrorWarningFormat="true" />
  </Target>

  <Target Name="RunJavaTests" Condition="'$(HasJdk)' == 'true' AND '$(SkipJavaClient)' != 'true' ">
    <Message Text="Running Java client tests" Importance="high" />
    <Message Text="> gradlew $(GradleOptions) test" Importance="high" />
    <Exec Command="./gradlew $(GradleOptions) test" WorkingDirectory="$(RepositoryRoot)clients/java/signalr" IgnoreStandardErrorWarningFormat="true" />
  </Target> 

  <PropertyGroup>
    <GetArtifactInfoDependsOn>$(GetArtifactInfoDependsOn);GetNpmArtifactInfo;GetJavaArtifactInfo</GetArtifactInfoDependsOn>
    <PrepareDependsOn>$(PrepareDependsOn);GetNpmArtifactInfo;GetJavaArtifactInfo</PrepareDependsOn>
  </PropertyGroup>

  <Target Name="GetNpmArtifactInfo">
    <ItemGroup>
      <NPMPackage Update="%(NPMPackage)">
        <PackageJson>$([System.IO.Path]::Combine(%(NPMPackage.FullPath), 'package.json'))</PackageJson>
        <OutputTar>$([System.IO.Path]::Combine(%(NPMPackage.FullPath), '%(NPMPackage.TarName)-$(PackageVersion).tgz'))</OutputTar>
        <ArtifactPath>$([System.IO.Path]::Combine($(BuildDir), '%(NPMPackage.TarName)-$(PackageVersion).tgz'))</ArtifactPath>
      </NPMPackage>

      <ArtifactInfo Include="%(NPMPackage.ArtifactPath)">
        <ArtifactType>NpmPackage</ArtifactType>
        <PackageId>%(NPMPackage.PackageId)</PackageId>
        <Version>$(PackageVersion)</Version>
        <Category>ship</Category>
      </ArtifactInfo>
    </ItemGroup>

    <ItemGroup>
      <FilesToExcludeFromSigning Include="%(NPMPackage.ArtifactPath);" />
    </ItemGroup>
  </Target>

  <Target Name="GetJavaArtifactInfo">
    <ItemGroup Condition=" '$(SkipJavaClient)' != 'true' ">
      <ArtifactInfo Include="$(BuildDir)\%(Jars.Identity)">
        <ArtifactType>JavaJar</ArtifactType>
        <Version>$(JavaClientVersion)</Version>
        <Category>ship</Category>
      </ArtifactInfo>
      <ArtifactInfo Include="$(BuildDir)\%(PomFile.Identity)">
        <ArtifactType>MavenPOM</ArtifactType>
        <Version>$(JavaClientVersion)</Version>
        <Category>ship</Category>
      </ArtifactInfo>

      <FilesToExcludeFromSigning Include="$(BuildDir)\%(Jars.Identity)" />
      <FilesToExcludeFromSigning Include="$(BuildDir)\%(PomFile.Identity)" />
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <CompileDependsOn>Restore;BuildNPMPackages;$(CompileDependsOn);BuildJavaClient</CompileDependsOn>
  </PropertyGroup>
  <Target Name="BuildNPMPackages" DependsOnTargets="RestoreNpm;GetNpmArtifactInfo">
    <Message Text="Building %(NPMPackage.PackageId)..." Importance="high" />
    <Exec Command="npm run build" WorkingDirectory="%(NPMPackage.FullPath)" />
    <Message Text="Building Browser Functional Tests..." Importance="high" />
    <Exec Command="npm run build" WorkingDirectory="$(RepositoryRoot)clients/ts/FunctionalTests" IgnoreStandardErrorWarningFormat="true" />
  </Target>

  <Target Name="BuildJavaClient" Condition="'$(HasJdk)' == 'true' AND '$(SkipJavaClient)' != 'true' " DependsOnTargets="GetJavaArtifactInfo">
    <Message Text="Building Java client" Importance="high" />
    <Message Text="> gradlew $(GradleOptions) compileJava" Importance="high" />
    <Exec Command="./gradlew $(GradleOptions) compileJava" WorkingDirectory="$(RepositoryRoot)clients/java/signalr" />
  </Target>

  <PropertyGroup>
    <PackageDependsOn>Compile;PackNPMPackages;$(PackageDependsOn);PackJavaClient</PackageDependsOn>
  </PropertyGroup>
  <Target Name="PackNPMPackages" DependsOnTargets="BuildNPMPackages">
    <Message Text="Packing %(NPMPackage.PackageId)..." Importance="high" />
    <Copy SourceFiles="%(NPMPackage.PackageJson)" DestinationFiles="%(NPMPackage.PackageJson).bak" />
    <Exec Command="npm --no-git-tag-version --allow-same-version version $(PackageVersion)" WorkingDirectory="%(NPMPackage.FullPath)" />
    <Exec Command="npm pack" WorkingDirectory="%(NPMPackage.FullPath)" />
    <Delete Files="%(NPMPackage.ArtifactPath)" Condition="Exists('%(NPMPackage.ArtifactPath)')" />
    <Move SourceFiles="%(NPMPackage.OutputTar)" DestinationFiles="%(NPMPackage.ArtifactPath)" />
    <Move SourceFiles="%(NPMPackage.PackageJson).bak" DestinationFiles="%(NPMPackage.PackageJson)" />
  </Target>

  <ItemGroup>
    <Jars Include="signalr-$(JavaPackageVersion).jar;signalr-$(JavaPackageVersion)-javadoc.jar;signalr-$(JavaPackageVersion)-sources.jar;" />
    <PomFile Include="signalr-$(JavaPackageVersion).pom" />
    <JavaBuildFiles Include="@(Jars);@(PomFile)"/>
  </ItemGroup>

  <Target Name="PackJavaClient" Condition="'$(HasJdk)' == 'true' AND '$(SkipJavaClient)' != 'true' ">
    <Message Text="Packing Java client" Importance="high" />
    <Message Text="> gradlew $(GradleOptions) createPackage" Importance="high" />
    <Exec Command="./gradlew $(GradleOptions) createPackage" WorkingDirectory="$(RepositoryRoot)clients/java/signalr" />
    <Copy SourceFiles="$(RepositoryRoot)clients/java/signalr\build\libs\%(JavaBuildFiles.Identity)" DestinationFolder="$(BuildDir)" />
  </Target>

</Project>
