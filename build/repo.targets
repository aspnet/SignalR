<Project>
  <ItemGroup>
    <NPMPackage Include="$(RepositoryRoot)clients/ts/signalr">
      <TarName>aspnet-signalr</TarName>
      <PackageId>@aspnet/signalr</PackageId>
    </NPMPackage>
    <NPMPackage Include="$(RepositoryRoot)clients/ts/signalr-protocol-msgpack">
      <TarName>aspnet-signalr-protocol-msgpack</TarName>
      <PackageId>@aspnet/signalr-protocol-msgpack</PackageId>
    </NPMPackage>
  </ItemGroup>

  <PropertyGroup>
    <RestoreDependsOn>$(RestoreDependsOn);RestoreNpm</RestoreDependsOn>
  </PropertyGroup>
  <Target Name="RestoreNpm" Condition="'$(PreflightRestore)' != 'True'">
    <Message Text="Restoring NPM modules" Importance="high" />
    <Exec Command="npm install --no-optional" WorkingDirectory="$(RepositoryRoot)clients/ts" />
    <Exec Command="npm install --no-optional" WorkingDirectory="$(RepositoryRoot)clients/ts/FunctionalTests" />
    <Exec Command="npm install --no-optional" WorkingDirectory="$(RepositoryRoot)clients/ts/signalr" />
    <Exec Command="npm install --no-optional" WorkingDirectory="$(RepositoryRoot)clients/ts/signalr-protocol-msgpack" />
    <Exec Command="npm install --no-optional" WorkingDirectory="$(RepositoryRoot)clients/ts/webdriver-tap-runner" />
  </Target>

  <PropertyGroup>
    <TestDependsOn>$(TestDependsOn);RunTSClientNodeTests;RunBrowserTests</TestDependsOn>
  </PropertyGroup>

  <Target Name="RunTSClientNodeTests">
    <Message Text="Running TypeScript client Node tests" Importance="high" />
    <Exec Command="npm test" WorkingDirectory="$(RepositoryRoot)clients/ts" IgnoreStandardErrorWarningFormat="true" />
  </Target>

  <Target Name="RunBrowserTests">
    <Message Text="Running TypeScript client Browser tests" Importance="high" />
    <Exec Command="npm run ci-test -- --configuration $(Configuration)" WorkingDirectory="$(RepositoryRoot)clients/ts/FunctionalTests" IgnoreStandardErrorWarningFormat="true" />
  </Target>

  <PropertyGroup>
    <GetArtifactInfoDependsOn>$(GetArtifactInfoDependsOn);GetNpmArtifactInfo</GetArtifactInfoDependsOn>
    <PrepareDependsOn>$(PrepareDependsOn);GetNpmArtifactInfo</PrepareDependsOn>
  </PropertyGroup>

  <Target Name="GetNpmArtifactInfo">
    <ItemGroup>
      <NPMPackage Update="%(NPMPackage)">
        <PackageJson>$([System.IO.Path]::Combine(%(NPMPackage.FullPath), 'package.json'))</PackageJson>
        <OutputTar>$([System.IO.Path]::Combine(%(NPMPackage.FullPath), '%(NPMPackage.TarName)-$(PackageVersion).tgz'))</OutputTar>
        <ArtifactPath>$([System.IO.Path]::Combine($(BuildDir), '%(NPMPackage.TarName)-$(PackageVersion).tgz'))</ArtifactPath>
      </NPMPackage>

      <ArtifactInfo Include="%(NPMPackage.ArtifactPath)">
        <ArtifactType>NpmPackage</ArtifactType>
        <PackageId>%(NPMPackage.PackageId)</PackageId>
        <Version>$(PackageVersion)</Version>
        <Category>ship</Category>
      </ArtifactInfo>
    </ItemGroup>

    <ItemGroup>
      <FilesToExcludeFromSigning Include="%(NPMPackage.ArtifactPath)" />
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <CompileDependsOn>Restore;BuildNPMPackages;$(CompileDependsOn)</CompileDependsOn>
  </PropertyGroup>
  <Target Name="BuildNPMPackages" DependsOnTargets="RestoreNpm;GetNpmArtifactInfo">
    <Message Text="Building %(NPMPackage.PackageId)..." Importance="high" />
    <Exec Command="npm run build" WorkingDirectory="%(NPMPackage.FullPath)" />
    <Message Text="Building Browser Functional Tests..." Importance="high" />
    <Exec Command="npm run build" WorkingDirectory="$(RepositoryRoot)clients/ts/FunctionalTests" IgnoreStandardErrorWarningFormat="true" />
  </Target>

  <PropertyGroup>
    <PackageDependsOn>Compile;PackNPMPackages;$(PackageDependsOn)</PackageDependsOn>
  </PropertyGroup>
  <Target Name="PackNPMPackages" DependsOnTargets="BuildNPMPackages">
    <Message Text="Packing %(NPMPackage.PackageId)..." Importance="high" />
    <Copy SourceFiles="%(NPMPackage.PackageJson)" DestinationFiles="%(NPMPackage.PackageJson).bak" />
    <Exec Command="npm --no-git-tag-version --allow-same-version version $(PackageVersion)" WorkingDirectory="%(NPMPackage.FullPath)" />
    <Exec Command="npm pack" WorkingDirectory="%(NPMPackage.FullPath)" />
    <Delete Files="%(NPMPackage.ArtifactPath)" Condition="Exists('%(NPMPackage.ArtifactPath)')" />
    <Move SourceFiles="%(NPMPackage.OutputTar)" DestinationFiles="%(NPMPackage.ArtifactPath)" />
    <Move SourceFiles="%(NPMPackage.PackageJson).bak" DestinationFiles="%(NPMPackage.PackageJson)" />
  </Target>
</Project>
